// –ò—Å–ø—Ä–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏:
let optional: Int? = 7
let nonOptional: Int = 2

// –ï—Å—Ç—å –ª–∏ –∑–¥–µ—Å—å –æ—à–∏–±–∫–∏?
 var name: String? = "Test"
// var age: Int = nil
 let distance: Float = 26.7
 var middleName: String? = nil

//// –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ number —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
let number: Int??? = nil
//print(number!!!)
if let a = number {
    if let b = a{
        if let c = b{
            print(c)
        }
    }
}else{print("does not contain value")}

// –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 15 –Ω–∞ 17 –≤ –º–∞—Å—Å–∏–≤–µ
 var numbers = [4, 8, 15, 16, 23, 42]
 numbers[2]=17
 print(numbers)
// –ï—Å—Ç—å –ª–∏ –∑–¥–µ—Å—å –æ—à–∏–±–∫–∏?
//
 let array1 = [Int]()
// let array2 = []
 let array3: [String] = []
//
 let array4 = [1, 2, 3]
 print(array4[0])
// print(array4[5])
 array4[1...2]
// array4[0] = 4
// array4.append(4)
//
 var array5 = [1, 2, 3]
 array5[0] = array5[1]
 array5[0...1] = [4, 5]
// array5[0] = "Six"
// array5 += 6
 for item in array5 { print(item) }
//
// let dict1: [Int, Int] = [:]
// let dict2 = [:]
 let dict3: [Int: Int] = [:]
//
 var dict4 = ["One": 1, "Two": 2, "Three": 3]
// dict4[1]
 dict4["One"]
 dict4["Zero"] = 0
// dict4[0] = "Zero"
//
 var dict5 = ["NY": "New York", "CA": "California"]
 dict5["NY"]
 dict5["WA"] = "Washington"
 dict5["CA"] = nil
print(dict5)

// –ù–∞–π–¥–∏—Ç–µ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏—Ö, –Ω–æ –Ω–µ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤:
 let houseAnimals: Set = ["üê∂", "üê±"]
 let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]
let farmAn = farmAnimals.subtracting(houseAnimals)

// –°–¥–µ–ª–∞–π—Ç–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
let appRatings = [
    "Calendar Pro": [1, 5, 5, 4, 2, 1, 5, 4],
    "The Messenger": [5, 4, 2, 5, 4, 1, 1, 2],
    "Socialise": [2, 1, 2, 2, 1, 2, 4, 2]
]
var ratings = appRatings.mapValues{
Double($0.reduce(0,+))/Double($0.count)
}

// –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 3
ratings.forEach {
    if $1>3{
        print($0,$1)
    }
}

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ "–ü—Ä–∏–≤–µ—Ç, " –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
func whereIsTheMoney(name:String) {
    print("Where's the money \(name)?")
}
whereIsTheMoney(name:"Lebowski")


// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –≤–∏–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
func frstnamescndname(firstname:String, secondname:String){
    print("Hello \(firstname) \(secondname)")
}
frstnamescndname(firstname:"Dude", secondname:"Lebowski")
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞ int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É

func sumall(_ num:Int...) -> Int {
    let totalSum = num.reduce(0, {$0+$1})
    return totalSum
}
print(sumall(1,2,3,4,5,6,7,8,9,10,45))

// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "–ü—Ä–∏–≤–µ—Ç" –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –í—ã–∑–æ–≤–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ

let hello = {
        print("–ü—Ä–∏–≤–µ—Ç")
}
hello()

// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É. –ü—Ä–∏—Å–≤–æ–π—Ç–µ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –µ–≥–æ
let sum = {
    (a:Int,b:Int)->Int in
    return a+b
}
print(sum(2,3))

// –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ [16, 8, 15, 42, 4, 23] –ø–æ —É–±—ã–≤–∞–Ω–∏—é
let array = [16, 8, 15, 42, 4, 23]
let sortedArray = array.sorted {$1<$0}
print(sortedArray)

// –ò–∑ –º–∞—Å—Å–∏–≤–∞ [16, 8, 15, 42, 4, 23] —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —á–∏—Å–ª–∞–º–∏ –±–æ–ª—å—à–µ 10
var newArray = [Int]()
array.forEach { number in
    if number > 10 {
        newArray.append(number)
    }
}
print(newArray)

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–≥–æ

func acceptClosure (str:String, using parameter: (String) -> String)->String {
    return parameter(str)
}
acceptClosure(str: "–ü—Ä–∏–≤–µ—Ç", using: { $0 + " –î—Ä—É–≥"
})

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —á—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
func printed() {
    print("printed something")
}
printed()

// –ù–∞–ø—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—Ç–æ—Ä–∞—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑


func repeatClosure( number:Int, closure:() -> ()) {
    for _ in 0...number{
        closure()
    }
}
repeatClosure( number: 5, closure:hello)


// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
// –£–±–µ—Ä–∏—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏
class Employee { var computer: Computer? }
class Computer { var employee: Employee? }
var employee: Employee? = Employee()
var computer: Computer? = Computer()
employee?.computer = computer
computer?.employee = employee

//// –£–±–µ—Ä–∏—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏
class Counter {
    var value = 0
    lazy var increase = {
        self.value += 1
        
    }
}
var count = Counter()
count.value = 3
count.increase()
count.value

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –ª—é–±–æ–º –∏–∑ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–µ, –ª–∏–±–æ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
let animals1 = ["dog", "cat", "bird", "pig"]
let animals2 = ["turtle", "snake", "lizard", "shark"]


func trueOrFalse (array:[Any]) -> Bool {
    var answer = false
    for num in array{
        if num is String{
             answer = true
        }else{
            answer = false
        }
    }
    return answer
}
trueOrFalse(array: array)

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
func factorial (_ n: Int) -> Double {
    if n == 0 {
        return 1
    }
    var a: Double = 1
    for i in 1...n {
        a *= Double(i)
    }
    return a
}
factorial (1)

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∞—Å—Å–∏–≤–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ü–∏—Ñ—Ä–∞ 2
let ar = [5,5,5,5,2,5,5,5,5,2,1,2]
func how2 (array:[Int])->Int{
    var c:Int = 0
    ar.forEach {
        if $0==2{
            c += 1
        }
    }
    return c
}
how2 (array:ar)

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Ü–∏—Ñ—Ä–∞ 2
func how23 (array:[Int])->Bool{
    var a:Bool=false
    for i in 0...2{
        if array[i] == 2 {
                a=true
            }
        }
    return a
    }
   how23 (array:ar)
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã 5 –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä—è–¥–æ–º –≤ –º–∞—Å—Å–∏–≤–µ
func nearby (array:[Int])->Int{
    var c:Int = 0
    for i in 0...array.count-1{
            if array[i] == 5 {
                if array[i+1] == 5{
                c+=1
                }
            }
        }
    return c
}
    

nearby(array:ar)


